Most of the settings for sweetmoment.ca was done following the Udemy course Flask REST API


The content distribution network was setup using cloudflare

The name servers are on cloudflare

The SSL certificate were set up on cloudflare using SSL/TLS encryption mode is Full and using the PEM format

(need to wait for DNS update to propagate before setting up SSL certficate)

install mysql server on the ubuntu server
sudo apt-get install mysql-server

mysql> ALTER USER 'root'@'localhost' IDENTIFIED with mysql_native_password BY '<password>';


 mysql -u root -p

enter 'root' for password

https://www.digitalocean.com/community/tutorials/how-to-install-wordpress-with-lemp-on-ubuntu-18-04

CREATE DATABASE sweetmoment DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;
Query OK, 1 row affected (0.00 sec)


mysql>FLUSH PRIVILEGES;

mysql> EXIT;


sudo apt install php-curl php-gd php-intl php-mbstring php-soap php-xml php-xmlrpc php-zip

https://www.digitalocean.com/community/tutorials/how-to-install-linux-nginx-mysql-php-lemp-stack-ubuntu-18-04

sudo apt install php-fpm php-mysql

under /etc/nginx/sites-available/sweetmoment.ca, set

server {
        listen 443 ssl default_server;
        listen [::]:443 ssl default_server;
        server_name sweetmoment.ca;
        ssl on;
        ssl_certificate /var/www/ssl/sweetmoment.ca.pem;
        ssl_certificate_key /var/www/ssl/sweetmoment.ca.key;
        # SSL configuration
        #
        # listen 443 ssl default_server;
        # listen [::]:443 ssl default_server;
        #
        # Note: You should disable gzip for SSL traffic.
        # See: https://bugs.debian.org/773332
        #
        # Read up on ssl_ciphers to ensure a secure configuration.
        # See: https://bugs.debian.org/765782
        #
        # Self signed certs generated by the ssl-cert package
        # Don't use them in a production server!
        #
        # include snippets/snakeoil.conf;

        root /var/www/html;

        # Add index.php to the list if you are using PHP
        index index.html index.htm index.nginx-debian.html;

        server_name sweetmoment.ca;

        location / {
                # First attempt to serve request as file, then
                # as directory, then fall back to displaying a 404.
                try_files $uri $uri/ =404;
        }

        # pass PHP scripts to FastCGI server
        #
        location ~ \.php$ {
                include snippets/fastcgi-php.conf;
        #
        #       # With php-fpm (or other unix sockets):
                fastcgi_pass unix:/var/run/php/php7.0-fpm.sock;
        #       # With php-cgi (or other tcp sockets):
        #       fastcgi_pass 127.0.0.1:9000;
        }

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        location ~ /\.ht {
                deny all;
        }
}


also set the it available on port 80 in that /etc/nginx/sites-available/sweetmoment.ca
server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name sweetmoment.ca www.sweetmoment.ca;

}



sudo nginx -t
nginx: [emerg] PEM_read_bio_X509_AUX("/var/www/ssl/sweetmoment.ca.pem") failed (SSL: error:0909006C:PEM routines:get_name:no start line:Expecting: TRUSTED CERTIFICATE)


for some reason i had manually change the .pem file to begin with
-----BEGIN TRUSTED CERTIFICATE-----
<cert content>
-----END TRUSTED CERTIFICATE----- 

Test again:
petery@-s-1vcpu-1gb-sfo3-01:/var/www/ssl$ sudo nginx -t
nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
nginx: configuration file /etc/nginx/nginx.conf test is successful
petery@-s-1vcpu-1gb-sfo3-01:/var/www/ssl$


Not sure why but cloudflare is not letting me through despite havingthe firewall on

To                         Action      From
--                         ------      ----
80/tcp (Nginx HTTP)        ALLOW IN    Anywhere
22/tcp                     ALLOW IN    Anywhere
80                         ALLOW IN    Anywhere
443/tcp                    ALLOW IN    Anywhere
80/tcp (Nginx HTTP (v6))   ALLOW IN    Anywhere (v6)
22/tcp (v6)                ALLOW IN    Anywhere (v6)
80 (v6)                    ALLOW IN    Anywhere (v6)
443/tcp (v6)               ALLOW IN    Anywhere (v6)

petery@-s-1vcpu-1gb-sfo3-01:/etc/nginx$ curl -s https://sweetmoment.ca
<html>
<head><title>521 Origin Down</title></head>
<body bgcolor="white">
<center><h1>521 Origin Down</h1></center>
<hr><center>cloudflare-nginx</center>
</body>
</html>
petery@-s-1vcpu-1gb-sfo3-01:/etc/nginx$ curl -s http://sweetmoment.ca
<html>
<head><title>521 Origin Down</title></head>
<body bgcolor="white">
<center><h1>521 Origin Down</h1></center>
<hr><center>cloudflare-nginx</center>
</body>
</html>

------------------

Using this sites-available/sweetmoment.ca configuration, I was able to go to https or http on sweetmoment.ca

server {
        listen 443 ssl default_server;
        listen [::]:443 ssl default_server;
        server_name sweetmoment.ca www.sweetmoment.ca;
        ssl on;
        ssl_certificate /var/www/ssl/sweetmoment.ca.pem;
        ssl_certificate_key /var/www/ssl/sweetmoment.ca.key;
        # SSL configuration
        #
        # listen 443 ssl default_server;
        # listen [::]:443 ssl default_server;
        #
        # Note: You should disable gzip for SSL traffic.
        # See: https://bugs.debian.org/773332
        #
        # Read up on ssl_ciphers to ensure a secure configuration.
        # See: https://bugs.debian.org/765782
        #
        # Self signed certs generated by the ssl-cert package
        # Don't use them in a production server!
        #
        # include snippets/snakeoil.conf;

        root /var/www/html;

        # Add index.php to the list if you are using PHP
        index index.html index.htm index.nginx-debian.html;

        server_name sweetmoment.ca;

        location / {
                # First attempt to serve request as file, then
                # as directory, then fall back to displaying a 404.
                try_files $uri $uri/ =404;
        }

        # pass PHP scripts to FastCGI server
        #
        location ~ \.php$ {
                include snippets/fastcgi-php.conf;
        #
        #       # With php-fpm (or other unix sockets):
                fastcgi_pass unix:/var/run/php/php7.0-fpm.sock;
        #       # With php-cgi (or other tcp sockets):
        #       fastcgi_pass 127.0.0.1:9000;
        }

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        location ~ /\.ht {
                deny all;
        }
}

server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name sweetmoment.ca www.sweetmoment.ca;
}


using curl http://sweetmoment.ca
or 
curl -s https://sweetmoment.ca
I was able retrieve the page

Now, I had to fix the redirect from http to https
by using this config:
sites-available/sweetmoment.ca
server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name sweetmoment.ca www.sweetmoment.ca;
        if ($http_x_forwarded_proto = "http") {
                return 301 https://$server_name$request_uri;
        }
}

Now I needed to install Wordpress
Download the latest from wordpress website into some tmp location

curl -LO https://wordpress.org/latest.tar.gz

tar xzvf latest.targ.gz

cp <tmp directory>/wordpress/wp-config.php /tmp/wordpress/wp-config.php


mkdir /var/www/sweetmoment

sudo cp -a /<temp directory>/wordpress/. /var/www/sweetmoment

sudo chown -R www-data:www-data /var/www/sweetmoment

get some secret keys from wordpress api

curl -s https://api.wordpress.org/secret-key/1.1/salt/

define('AUTH_KEY',         'blahblahblah');
define('SECURE_AUTH_KEY',  'blahblahblah');
define('LOGGED_IN_KEY',    'blahblahblah');
define('NONCE_KEY',        'blahblahblah');
define('AUTH_SALT',        'blahblahblah');
define('SECURE_AUTH_SALT', 'blahblahblah');
define('LOGGED_IN_SALT',   'blahblahblah');
define('NONCE_SALT',       'blahblahblah');

However, I ran into problem where it kept trying to download index.php instead of executing it as a php script
Finally fixed the issue by deleting browser cache and the final /etc/nginx/sites-available/sweetmoment.ca file is like this:
server {
        listen 443 ssl default_server;
        listen [::]:443 ssl default_server;
        server_name sweetmoment.ca www.sweetmoment.ca;
        ssl on;
        ssl_certificate /var/www/ssl/sweetmoment.ca.pem;
        ssl_certificate_key /var/www/ssl/sweetmoment.ca.key;

        root /var/www/html/sweetmoment;

        index index.php;

        server_name sweetmoment.ca;
        client_max_body_size 100M;

        location / {
                try_files $uri $uri/ /index.php?$args;
        }

        
        location ~ \.php$ {
                include snippets/fastcgi-php.conf;
                fastcgi_pass unix:/run/php/php7.2-fpm.sock;
      
        }

       
        location ~ /\.ht {
                deny all;
        }
}

server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name sweetmoment.ca www.sweetmoment.ca;
        if ($http_x_forwarded_proto = "http") {
                return 301 https://$server_name$request_uri;
        }
        root /var/www/html/sweetmoment;

       
        index index.php;

        server_name sweetmoment.ca;

        location / {
 
                try_files $uri $uri/ /index.php$is_args$args;
        }

    
        location ~ \.php$ {
                include snippets/fastcgi-php.conf;
                fastcgi_pass unix:/run/php/php7.2-fpm.sock;
}
}

Remember to do :
sudo systemctl reload nginx
sudo systemctl restart nginx

you can also restart the php7.2 service :
sudo systemctl restart php7.2-fpm

I am not sure if the following had anything to do with it, but I did modify the /etc/php/7.2./fpm/php.ini with the following directives

date.timezone = America/Chicago
cgi.fix_pathinfo=0
date.timezone = America/Chicago

